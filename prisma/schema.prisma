// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?  // ✅ For login Credentials

  roleId  String?  
  role    Role?    @relation(fields: [roleId], references: [id], onDelete: SetNull)

  accounts    Account[]
  sessions    Session[]
  permissions UserPermission[]// ✅ Many-to-Many relationship via junction table

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id   String @id @default(cuid())
  name String @unique

  users       User[]
  permissions RolePermission[]// ✅ Many-to-Many relationship via junction table
}

model Permission {
  id   String @id @default(cuid())
  name String @unique

  users UserPermission[]// ✅ Many-to-Many relationship via junction table
  roles RolePermission[]// ✅ Many-to-Many relationship via junction table
}

model UserPermission {
  userId       String
  permissionId String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission  Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([userId, permissionId]) 
}

model RolePermission {
  roleId       String
  permissionId String
  role        Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission  Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId]) 
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

 
